#!/usr/bin/env node

/**
 * Module dependencies.
 */

/**
*
*
*                                 _ooOoo_
*                                o8888888o
*                                88" . "88
*                                (| -_- |)
*                                 O\ = /O
*                             ____/`---'\____
*                              .' \\| |// `.
*                            / \\||| : |||// \
*                          / _||||| -:- |||||- \
*                            | | \\\ - /// | |
*                          | \_| ''\---/'' | |
*                           \ .-\__ `-` ___/-. /
*                        ___`. .' /--.--\ `. . __
*                     ."" '< `.___\_<|>_/___.' >'"".
*                    | | : `- \`.;`\ _ /`;.`/ - ` : | |
*                      \ \ `-. \_ __\ /__ _/ .-` / /
*              ======`-.____`-.___\_____/___.-`____.-'======
*                                 `=---='
*              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
*                            佛祖保佑 永无BUG
*               佛曰:
*                     写字楼里写字间，写字间里程序员；
*                     程序人员写程序，又拿程序换酒钱。
*                     酒醒只在网上坐，酒醉还来网下眠；
*                     酒醉酒醒日复日，网上网下年复年。
*                     但愿老死电脑间，不愿鞠躬老板前；
*                     奔驰宝马贵者趣，公交自行程序员。
*                     别人笑我忒疯癫，我笑自己命太贱；
*                     不见满街漂亮妹，哪个归得程序员？
*/


var app = require('../app');
var debug = require('debug')('localqna:server');
var https = require('https');
var fs = require('fs');
var constants = require('constants');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8443');
app.set('port', port);

/**
 * Create HTTP server.
 */

var key = fs.readFileSync(path.join(__dirname,'..','..','cert','localqna.key'));
var cert = fs.readFileSync(path.join(__dirname,'..','..','cert','localqna.crt'));
var https_options = {
    key: key,
    cert: cert,
    secureProtocol: 'SSLv23_method',
    secureOptions: constants.SSL_OP_NO_SSLv3 | constants.SSL_OP_NO_TLSv1
};

// var server = http.createServer(app);

var server = https.createServer(https_options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
